---
title: "Hands-on Exercise 2"
author: "SMLurker"
---

# Getting started

## Install and launching R packages

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse) 
```

## Importing data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# Beyond ggplot2 Annotation: ggrepel

#### One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

```{r}
#| message: FALSE
ggplot(data=exam_data, aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## Working with ggrepel

```{r}
#| warning: FALSE
#| message: FALSE
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

# Beyond ggplot2 Themes

#### ggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```

## Working with ggtheme package

#### ggthemes provides 'ggplot2' themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, 'Stata', 'Excel', and The Wall Street Journal, among others.

#### In the example below, The Economist theme is used.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## Working with hrbthems package

#### hrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

```{r}
#| warning: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

#### The second goal centers around productivity for a production workflow. In fact, this "production workflow" is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.

```{r}
#| warning: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

# Beyond Single Graph

#### It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.

```{r}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```

#### Next

```{r}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")
```

#### Lastly, we will draw a scatterplot for English score versus Maths score by as shown below

```{r}
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## Creating Composite Graphics: pathwork methods

#### There are several ggplot2 extension's functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.

#### Patchwork package has a very simple syntax where we can create layouts super easily. Here's the general syntax that combines:

#####  Two-Column Layout using the Plus Sign +.

#####  Parenthesis () to create a subplot group.

#####  Two-Row Layout using the Division Sign /

## Combining two ggplot2 graphs

#### Figure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!

```{r}
p1+p2
```

## Combining three ggplot2 graphs

#### We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

#####  "\|" operator to stack two ggplot2 graphs,

#####  "/" operator to place the plots beside each other,

#####  "()" operator the define the sequence of the plotting.

```{r}
(p1/p2)|p3
```

## Creating a composite figure with tag

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

## Creating figure with insert

#### Beside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.

```{r}
p12 <- p1|p2
p3 + inset_element(p12, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

## Creating a composite figure by using patchwork and ggtheme

#### Figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.

```{r}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
